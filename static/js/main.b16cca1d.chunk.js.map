{"version":3,"sources":["PropsRoute.js","shared/types.js","shared/constants.js","shared/BookShelfChanger.js","shared/Book.js","utils/StringUtils.js","shared/BooksGrid.js","utils/ArrayUtils.js","MyReads/BookShelf.js","MyReads/MyReads.js","BooksAPI.js","Search/SearchBar.js","PanelError.js","Search/SearchPage.js","NotFoundPage.js","Navigation.js","BookLoader.js","App.js","registerServiceWorker.js","utils/helpers.js","index.js"],"names":["PropsRoute","_ref","component","path","otherProps","Object","objectWithoutProperties","react_default","a","createElement","Route","assign","render","routeProps","React","objectSpread","TShelfKey","freeze","authors","PropTypes","arrayOf","string","isRequired","id","shelf","thumbnail","title","CURRENTLY_READING","WANT_TO_READ","READ","NONE","SHELF_TITLE","_Object$freeze","defineProperty","ERROR","BookShelfChanger","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedValue","status","onSelectChange","bind","assertThisInitialized","mounted","event","_this2","STATUS","constructor","_this$props","book","updateBookShelf","setState","target","value","BUSY","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","READY","stop","_this$state","className","onChange","disabled","entries","map","_ref2","_ref3","slicedToArray","shelfKey","shelfTitle","key","nextProps","prevState","Component","Book","imageLinks","style","width","height","backgroundSize","backgroundImage","concat","shared_BookShelfChanger","str","noiseWords","replace","word","lcWord","toLowerCase","includes","char","toUpperCase","makeTitle","author","index","BooksGrid","_len","arguments","length","arrays","Array","_key","apply","toConsumableArray","arr","i","others","slice","splice","unique","Set","filter","x","ArrayDiff","books","shared_Book","BookShelf","shelfKeys","Error","shared_BooksGrid","MyReads","booksInShelves","keys","booksInShelf","MyReads_BookShelf","Link","to","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","fetch","method","Content-Type","body","JSON","stringify","then","res","json","search","query","maxResults","data","SearchBar","async","onTyping","DEBOUNCING_TIME","debounce","nextState","showResult","Promise","resolve","fetchBooks","sent","_x","reject","SEARCH_LIMIT","getBookShelf","BooksAPI","fetchedBooks","error","_context2","t0","_this3","BOOKS_STATUS","found","catch","test","message","console","type","placeholder","PanelError","SearchPage","Search_SearchBar","src_PanelError","NotFoundPage","Navigation","Switch","src_PropsRoute","exact","BookLoader","App","fetchAllBooks","INITIAL","bookID","find","currBooksInShelves","bookIdsInShelves","bookId","ok","undefined","bookIndex","findIndex","_ref4","t1","src_BookLoader","src_Navigation","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","checkValidServiceWorker","response","get","indexOf","ready","unregister","reload","getBasename","basename","settings","ReactDOM","BrowserRouter","src_App_0","document","getElementById","URL","process","origin","addEventListener","registerServiceWorker"],"mappings":"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","file":"static/js/main.b16cca1d.chunk.js","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\n\n// Allows passing custom props to Routes using a clearer syntax\n\nconst PropsRoute = ({ component, path, ...otherProps }) => (\n  <Route\n    {...otherProps}\n    path={path}\n    render={routeProps => React.createElement(component, { ...otherProps, ...routeProps })}\n  />\n);\n\nexport default PropsRoute;\n","import PropTypes from 'prop-types';\n\n/**\n * @module\n * @name types\n * @description\n * Provides a set of types to be used in different components.\n */\n\n\n/**\n * @enum TBook\n * @description\n * Custom type to define a book internally.\n * It's filled with properties coming from the\n * book literal object fetched using the BooksAPI\n * @property {string[]} [authors] - List of the authors names\n * @property {string} id - The book unique id\n * @property {string} shelf - The shelf unique name\n * @property {string} [thumbnail] - URL for the cover preview image\n * @property {string} title - The book's title\n */\nexport const TBook = Object.freeze({\n  authors: PropTypes.arrayOf(PropTypes.string.isRequired),\n  id: PropTypes.string.isRequired,\n  shelf: PropTypes.string.isRequired,\n  thumbnail: PropTypes.string,\n  title: PropTypes.string.isRequired,\n});\n\n\n/**\n * @enum TShelfKey\n * @description\n * Collection of shelves keys as they are coming from remote\n * as value of the shelf property of the book literal object\n * when fetching all the books\n * @property {string} CURRENTLY_READING - currentlyReading\n * @property {string} WANT_TO_READ - wantToRead\n * @property {string} RED - read\n * @property {string} NONE - none\n */\nexport const TShelfKey = Object.freeze({\n  CURRENTLY_READING: 'currentlyReading',\n  WANT_TO_READ: 'wantToRead',\n  READ: 'read',\n  NONE: 'none',\n});\n","import { TShelfKey } from './types';\n\n/**\n * @module\n * @name constants\n * @description\n * Provides a set of constants to be used in different components.\n */\n\n\n/**\n * @member\n * @description\n * Dictionary of shelf labels\n * see [TShelfKey]{@link module:types.TShelfKey}\n * @type {Object.<TShelfKey, string>}\n * @property {TShelfKey} CURRENTLY_READING - Currently Reading\n * @property {TShelfKey} WANT_TO_READ - Want to Read\n * @property {TShelfKey} READ - Read\n * @property {TShelfKey} NONE - None\n * @constant\n */\nexport const SHELF_TITLE = Object.freeze({\n  [TShelfKey.CURRENTLY_READING]: 'Currently Reading',\n  [TShelfKey.WANT_TO_READ]: 'Want to Read',\n  [TShelfKey.READ]: 'Read',\n  [TShelfKey.NONE]: 'None',\n});\n\nexport const ERROR = {\n  BOOKS_API_FAILED: 'unexpected result from BooksAPI',\n  BOOKS_IN_MULTI_SHELVES: 'the books passed are contained in multiple shelves',\n  UNEXPECTED_STATUS: 'unexpected status',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SHELF_TITLE } from './constants';\nimport { TBook } from './types';\n\n/**\n * @module\n * @name BookShelfChanger\n * @extends React.Component\n * @description\n * Shows a selection that allows the user to change the shelf of the book\n */\nclass BookShelfChanger extends React.Component {\n  /**\n   * @member\n   * @name STATUS\n   * @description Collection of possible status\n   * @property {string} BUSY\n   * The user selected a different shelf for this book\n   * and the App is busy changing the shelf remotely\n   * @property {string} READY\n   * Either the component received the current shelf in the props\n   * or it successfully changed it remotely\n   * @static\n   */\n  static STATUS = {\n    BUSY: 'STATUS.BUSY',\n    READY: 'STATUS.READY',\n  };\n\n  /**\n   * @member\n   * @name propTypes\n   * @description Intended types of the props passed to the component\n   * @property {TBook} book - The book the changer is associated with\n   * @property {function} updateBookShelf - see {@link module:App~updateBookShelf}\n   * @static\n   */\n  static propTypes = {\n    book: PropTypes.shape(TBook).isRequired,\n    updateBookShelf: PropTypes.func.isRequired,\n  };\n\n\n  constructor(props) {\n    super(props);\n    this.onSelectChange = this.onSelectChange.bind(this);\n  }\n\n\n  /**\n   * @member\n   * @name state\n   * @property {TShelfKey} selectedValue - the current selected shelf key\n   * @property {STATUS} status\n   * one of the possible [STATUS]{@link module:BookShelfChanger.STATUS}\n   * @private\n   */\n  state = {\n    selectedValue: '',\n    status: '',\n  };\n\n\n  // The shelf key coming from the props becomes stored internally as state\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.selectedValue === '') {\n      return {\n        selectedValue: nextProps.book.shelf,\n        status: BookShelfChanger.STATUS.READY,\n      };\n    }\n    return null;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  /**\n   * @method\n   * @description\n   * Handles the change event of the user selection.\n   * Firstly it updates the internal state, then it triggers the\n   * [updateBookShelf]{@link module:App~updateBookShelf} method of the App component\n   * to update the list of books in the shelves\n   * @param {SyntheticEvent} event\n   * @returns {void}\n   * @private\n   */\n  onSelectChange(event) {\n    const { STATUS } = this.constructor;\n    const { book, updateBookShelf } = this.props;\n\n    this.setState({\n      selectedValue: event.target.value,\n      status: STATUS.BUSY,\n    }, async () => {\n      const { selectedValue } = this.state;\n      await updateBookShelf(book, selectedValue);\n\n      // - Moving shelf in MySearch will cause the book to unmount,\n      // in this case the new shelf will be passed throught the props.\n      // - Moving shelf in the SearchPage won't cause the book to be umounted,\n      // but the changer won't be renderer again either, so we need\n      // to set change the status to trigger a re-render.\n      // We need to check if the component is mounted to prevent triggering\n      // an error in the console\n      if (this.mounted) {\n        this.setState({\n          status: STATUS.READY,\n        });\n      }\n    });\n  }\n\n\n  /**\n   * @method\n   * @name render\n   * @description\n   * Creates the selection containing all the available shelves.\n   * @returns {ReactElement}\n   * @private\n   */\n  render() {\n    const { STATUS } = this.constructor;\n    const { status, selectedValue } = this.state;\n\n    return (\n      <div className=\"book-shelf-changer\">\n        {status === STATUS.BUSY && (\n          <div id=\"loading\" />\n        )}\n        <select value={selectedValue} onChange={this.onSelectChange}>\n          <option value=\"move\" disabled>Move to...</option>\n          {Object.entries(SHELF_TITLE).map(([shelfKey, shelfTitle]) => (\n            <option key={shelfKey} value={shelfKey}>{shelfTitle}</option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default BookShelfChanger;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BookShelfChanger from './BookShelfChanger';\nimport { makeTitle, ucwords } from '../utils/StringUtils';\nimport { TBook } from './types';\n\n/**\n * @module\n * @name Book\n * @extends React.Component\n * @description Displays the book's preview\n */\nclass Book extends React.Component {\n  /**\n   * @member\n   * @name propTypes\n   * @description Intended types of the props passed to the component\n   * @property {TBook} book - The book to show\n   * @property {function} updateBookShelf - see {@link module:App~updateBookShelf}\n   * @static\n   */\n  static propTypes = {\n    book: PropTypes.shape(TBook).isRequired,\n    updateBookShelf: PropTypes.func.isRequired,\n  };\n\n\n  /**\n   * @method\n   * @name render\n   * @description\n   * Shows a preview of the book and displays a selection to change shelf by rendering\n   * the [BookShelfChanger]{@link module:BookShelfChanger} component\n   * @returns {ReactElement}\n   * @private\n   */\n  render() {\n    const { book, updateBookShelf } = this.props;\n\n    const thumbnail = book.imageLinks && book.imageLinks.thumbnail\n      ? book.imageLinks.thumbnail\n      : 'https://books.google.co.uk/googlebooks/images/no_cover_thumb.gif';\n\n    return (\n      <li>\n        <div className=\"book\">\n          <div className=\"book-top\">\n            <div\n              className=\"book-cover\"\n              style={{\n                width: 128,\n                height: 193,\n                backgroundSize: 'cover',\n                backgroundImage: `url(${thumbnail})`,\n              }}\n            />\n            <BookShelfChanger\n              key={`${book.id}-changer`}\n              book={book}\n              updateBookShelf={updateBookShelf}\n            />\n          </div>\n          <div className=\"book-title\">{makeTitle(book.title)}</div>\n          <div className=\"book-authors\">\n            {(book.authors || []).map((author, index) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <span className=\"author\" key={index}>{ucwords(author)}</span>\n            ))}\n          </div>\n        </div>\n      </li>\n    );\n  }\n}\n\n\nexport default Book;\n","/**\n * @module StringUtils\n * @description\n * Provides a set of string utility functions.\n */\n\n/**\n  * @function ucwords\n  * @description\n  * Uppercases the first character of every word of a given string.<br>\n  * All the other characters are lowercased by default.\n  * @param {string} str\n  * @returns {string}\n  * @example\n  * // returns: Hello World\n  * const str = ucwords('heLLO WorLD');\n  */\nexport const ucwords = str => (\n  str.toLowerCase().replace(/\\b\\S/g, char => char.toUpperCase())\n);\n\n\n/**\n * @function ucfirst\n * @description\n * Uppercases the first character of the first word of a given string.<br>\n * All the other characers are lowercased by default.\n * @param {string} str\n * @returns {string}\n * @example\n * // returns: Hello world\n * const str = ucfirst('heLLO WorLD');\n */\nexport const ucfirst = str => (\n  str.toLowerCase().replace(/\\S/, char => char.toUpperCase())\n);\n\n\n/**\n * @function makeTitle\n * @description\n * Uppercases the first character of every word of a given string,\n * except if considered noise words, such as prepositions,\n * which are kept lowercased.<br>\n * All the other characers are lowercased by default.<br>\n * <br>\n * It also makes sure to capitalise:\n * - the first word of the string\n * - the first word after a column\n * even if they are considered noise.\n * @param {string} str\n * @returns {string}\n * @example\n * // returns: The Complete Guide: The New and the Old\n * const title = makeTitle('the complete guide: the new and the old');\n */\nexport const makeTitle = (str) => {\n  const noiseWords = [\n    'a', 'abaft', 'aboard', 'about', 'above', 'absent', 'across', 'afore', 'after', 'against', 'along', 'alongside', 'amid',\n    'amidst', 'among', 'amongst', 'an', 'and', 'anenst', 'apropos', 'apud', 'around', 'as', 'aside', 'astride', 'at', 'athwart', 'atop',\n    'barring', 'before', 'behind', 'below', 'beneath', 'beside', 'besides', 'between', 'beyond', 'but', 'by', 'circa',\n    'concerning', 'despite', 'down', 'during', 'except', 'excluding', 'failing', 'following', 'for', 'forenenst', 'from',\n    'given', 'in', 'including', 'inside', 'into', 'like', 'mid', 'midst', 'minus', 'modulo', 'near', 'next', 'notwithstanding',\n    'o', 'of', 'off', 'on', 'onto', 'opposite', 'or', 'out', 'outside', 'over', 'pace', 'past', 'per', 'plus', 'pro', 'qua', 'regarding',\n    'round', 's', 'sans', 'save', 'since', 'so', 'than', 'the', 'through', 'thru', 'throughout', 'thruout', 'till', 'times', 'to', 'toward',\n    'towards', 'under', 'underneath', 'unlike', 'until', 'unto', 'up', 'upon', 'versus', 'vs', 'via', 'vice', 'vis', 'with', 'within',\n    'without', 'worth', 'this',\n  ];\n\n  return str\n    .replace(/\\w+/ig, (word) => {\n      const lcWord = word.toLowerCase();\n      return noiseWords.includes(lcWord)\n        ? lcWord // noise words are kept lowercased\n        : ucfirst(word); // not noise words are capitalised\n    })\n    // the first word of the string and the first word after a column are capitalised\n    .replace(/(^\\S|:\\s*\\S)/g, char => char.toUpperCase());\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Book from './Book';\nimport { TBook } from './types';\nimport { diff as ArrayDiff } from '../utils/ArrayUtils';\n\n/**\n * @module\n * @name BooksGrid\n * @extends React.Component\n * @description\n * Prints a list of books.\n * This module is used both in MyReads to show the books for each shelf,\n * and in the SearchPage to show the books retrieved by a search.\n */\nclass BooksGrid extends React.Component {\n  /**\n   * @member\n   * @name propTypes\n   * @description Intended types of the props passed to the component\n   * @property {TBook[]} books - List of the books to show\n   * @property {function} updateBookShelf - see {@link module:App~updateBookShelf}\n   * @static\n   */\n  static propTypes = {\n    books: PropTypes.arrayOf(\n      PropTypes.shape(TBook).isRequired,\n    ).isRequired,\n    updateBookShelf: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @method\n   * @name shouldComponentUpdate\n   * @param {Object} nextProps - ignored as the module does not expect props\n   * @param {TBook[]} nextProps.books - foo\n   * @returns {boolean} - false if the books to show don't change\n   * @private\n   */\n  shouldComponentUpdate(nextProps) {\n    const { books } = this.props;\n    return ArrayDiff(books, nextProps.books).length > 0;\n  }\n\n\n  /**\n   * @method\n   * @name render\n   * @description\n   * Renders the [Book]{@link module:Book} component for each book in the given books list\n   * @returns {ReactElement}\n   * @private\n   */\n  render() {\n    const { books, updateBookShelf } = this.props;\n    return (\n      <ol className=\"books-grid\">\n        {books.map(book => (\n          <Book\n            key={book.id}\n            book={book}\n            updateBookShelf={updateBookShelf}\n          />\n        ))}\n      </ol>\n    );\n  }\n}\n\nexport default BooksGrid;\n","/**\n * @module ArrayUtils\n * @description\n * Provides a set of array utility functions.\n */\n\n\n/**\n * @function diff\n * @description\n * Retrieves the symmetric difference between arrays.\n * @param {...Array} arrays - the arrays to compare\n * @returns {Array} - the symmetric difference between the given arrays\n * @example\n * const a = ['a', 'd', 'e'];\n * const b = ['a', 'b', 'c', 'd'];\n * diff(a, b); // (3) [\"e\", \"b\", \"c\"]\n */\nexport const diff = (...arrays) => [].concat(...arrays.map((arr, i) => {\n  const others = arrays.slice(0);\n  others.splice(i, 1);\n  const unique = [...new Set([].concat(...others))];\n  return arr.filter(x => !unique.includes(x));\n}));\n\n\n/**\n * @function diffByKey\n * @description\n * Retrieves the symmetric difference between arrays of objects\n * by comparing a key in common between the objects.\n * @param {string} key - the key in common between the objects to use in the comparison\n * @param {...Array} arrays - the arrays to compare\n * @returns {Array} - the symmetric difference between the given arrays\n * @example\n * const a = [{k:1}, {k:2}, {k:3}];\n * const b = [{k:1}, {k:4}, {k:5}, {k:6}];\n * const c = [{k:3}, {k:5}, {k:7}];\n * diffByKey('k', a, b, c); // (4) [{k:2}, {k:4}, {k:6}, {k:7}]\n */\nexport const diffByKey = (key, ...arrays) => [].concat(...arrays.map((arr, i) => {\n  const others = arrays.slice(0);\n  others.splice(i, 1);\n  const unique = [...new Set([].concat(...others))];\n  return arr.filter(x => (\n    !unique.some(y => x[key] === y[key])\n  ));\n}));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BooksGrid from '../shared/BooksGrid';\nimport { TBook } from '../shared/types';\nimport { ERROR, SHELF_TITLE } from '../shared/constants';\n\n/**\n * @module\n * @name BookShelf\n * @extends React.Component\n * @description\n * Prints the shelf title and shows the list of all the books in the shelf\n */\nclass BookShelf extends React.Component {\n  /**\n   * @member\n   * @name propTypes\n   * @description Intended types of the props passed to the component\n   * @property {TBook[]} books - List of all the books in the shelf\n   * @property {function} updateBookShelf - see {@link module:App~updateBookShelf}\n   * @static\n   */\n  static propTypes = {\n    books: PropTypes.arrayOf(\n      PropTypes.shape(TBook).isRequired,\n    ).isRequired,\n    updateBookShelf: PropTypes.func.isRequired,\n  };\n\n\n  /**\n   * @method\n   * @name render\n   * @description\n   * - Prints the shelf's title\n   * - Shows the list of books in the shelf by rendering the BooksGrid component\n   * @returns {ReactElement}\n   * @throws {Error} if the books passed to the component are contained in multiple shelves\n   */\n  render() {\n    const { books, updateBookShelf } = this.props;\n\n    const shelfKeys = [\n      ...new Set(books.map(book => book.shelf)),\n    ];\n\n    if (shelfKeys.length > 1) {\n      throw new Error(ERROR.BOOKS_IN_MULTI_SHELVES, shelfKeys);\n    }\n    const shelfTitle = SHELF_TITLE[shelfKeys[0]];\n\n    return (\n      <div className=\"bookshelf\">\n        <h2 className=\"bookshelf-title\">{shelfTitle}</h2>\n        <div className=\"bookshelf-books\">\n          <BooksGrid\n            books={books}\n            updateBookShelf={updateBookShelf}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BookShelf;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport BookShelf from './BookShelf';\nimport { TBook } from '../shared/types';\nimport { SHELF_TITLE } from '../shared/constants';\n\n/**\n * @module\n * @name MyReads\n * @extends React.Component\n * @description\n * Displays the 'MyReads' title and shows all the books listed by shelf name.\n */\nexport default class MyReads extends React.Component {\n  /**\n   * @member\n   * @name propTypes\n   * @description Intended types of the props passed to the component\n   * @property {TBook[]} booksInShelves - see {@link module:App~state}\n   * @property {function} updateBookShelf - see {@link module:App~updateBookShelf}\n   * @static\n   */\n  static propTypes = {\n    booksInShelves: PropTypes.arrayOf(\n      PropTypes.shape(TBook).isRequired,\n    ).isRequired,\n    updateBookShelf: PropTypes.func.isRequired,\n  };\n\n\n  /**\n   * @method\n   * @name render\n   * @description\n   * - Iterates the available [SHELF_TITLE]{@link module:constants.SHELF_TITLE}\n   * to list the books in a shelf by rendering the BookShelf component\n   * - Add the plus icon to add new books\n   * @returns {ReactElement}\n   */\n  render() {\n    const { booksInShelves, updateBookShelf } = this.props;\n\n    return (\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <div className=\"list-books-content\">\n          {Object.keys(SHELF_TITLE).map((shelfKey) => {\n            const booksInShelf = booksInShelves.filter(({ shelf }) => (\n              shelf === shelfKey\n            ));\n            if (booksInShelf.length > 0) {\n              return (\n                <BookShelf\n                  key={shelfKey}\n                  books={booksInShelf}\n                  updateBookShelf={updateBookShelf}\n                />\n              );\n            }\n            return null;\n          })}\n        </div>\n        <div className=\"open-search\">\n          <Link to=\"/search\" id=\"goto-search\">Add a book</Link>\n        </div>\n      </div>\n    );\n  }\n}\n","/* eslint-disable */\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = bookId =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.ok ? res.json() : {book: undefined})\n    .then(data => data.book);\n\nexport const getAll = () => {\n  return fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books);\n}\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query, maxResults })\n  }).then(res => res.json())\n    .then(data => data.books)\n\n/* eslint-enable */\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\nimport * as BooksAPI from '../BooksAPI';\n\n/**\n * @module\n * @name SearchBar\n * @extends React.Component\n * @description\n * Shows an input type field with whih the user can perform a search for new books.\n */\nclass SearchBar extends React.Component {\n  /**\n   * @member\n   * @name SEARCH_LIMIT\n   * @description the search is limited to this amount of elements\n   * @constant {number}\n   * @default 20\n   * @static\n   * @private\n   */\n  static SEARCH_LIMIT = 20;\n\n\n  /**\n   * @member\n   * @name DEBOUNCING_TIME\n   * @description only one search allowed within the frame of this amount milliseconds\n   * @constant {number}\n   * @default 250\n   * @static\n   * @private\n   */\n  static DEBOUNCING_TIME = 250; // milliseconds\n\n\n  /**\n   * @member\n   * @name BOOKS_STATUS\n   * @description Collection of possible status of the books retrieved by a search\n   * @property {string} READY - The search has been performed successfully\n   * @property {string} ERROR - An error occurred while performing the search\n   * @static\n   * @private\n   */\n  static BOOKS_STATUS = {\n    READY: 'BOOKS_STATUS.READY',\n    ERROR: 'BOOKS_STATUS.ERROR',\n  };\n\n\n  /**\n   * @name propTypes\n   * @description Intended types of the props passed to the component\n   * @property {function} showResult - see [showResult]{@link module:SearchPage~showResult}\n   * @static\n   */\n  static propTypes = {\n    showResult: PropTypes.func.isRequired,\n  };\n\n\n  /**\n   * @name state\n   * @property {string} query - search query typed by the user in the search bar\n   * @static\n   * @private\n   */\n  state = {\n    query: '',\n  };\n\n\n  /**\n   * @member\n   * @name async\n   * @description\n   * Collection of promises useful when making unit tests.\n   * @property {Promise} onTyping - waiting for the books to be fetched\n   *                                when the user types in the search bar\n   */\n  async = {\n    onTyping: null,\n  };\n\n  constructor(props) {\n    super(props);\n    const { DEBOUNCING_TIME } = this.constructor;\n\n    this.onTyping = this.onTyping.bind(this);\n    this.search = debounce(this.search, DEBOUNCING_TIME);\n  }\n\n  /**\n   * @method\n   * @name shouldComponentUpdate\n   * @param {Object} nextProps - ignored\n   * @param {state} nextState - refers to [state]{@link module:SearchBar~sstate}\n   * @returns {boolean} - false if the query hasn't changed\n   * @private\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    const { query } = this.state;\n    return query !== nextState.query;\n  }\n\n  /**\n   * @method\n   * @name onTyping\n   * @description\n   * Updates the internal state according to the query typed by the user,\n   * then it clears the books list if the textfield is empty,\n   * otherwise it performs a search based on the typed query.\n   * @param {SyntheticEvent} event\n   * @returns {void}\n   * @private\n   */\n  onTyping(event) {\n    const query = event.target.value;\n    const { showResult } = this.props;\n    this.async.onTyping = new Promise(async (resolve) => {\n      await this.setState({ query });\n      const books = await this.fetchBooks(query);\n      await showResult(books);\n      resolve(books);\n    });\n  }\n\n  /**\n   * @method\n   * @name search\n   * @description\n   * Promise executor that performs a search to find books matching\n   * the query string typed by the user.\n   * If no books are found, or if the search completes with an error,\n   * then an empty array is returned so that the list under the searchbar is cleared.\n   * The promise is rejected if an exception is triggered while performng the search.\n   * @param {string} query - query string typed by the user\n   * @param {function} [resolve] - optional callback triggered when the promise is fullfilled\n   * @param {function} [reject] - optional callback triggered when the promise\n   * @returns {TBook[]}\n   * @private\n   */\n  async search(query, resolve, reject) {\n    const { SEARCH_LIMIT } = this.constructor;\n    const { getBookShelf } = this.props;\n\n    let books;\n\n    if (query === '') {\n      books = [];\n      return resolve(books);\n    }\n\n    try {\n      const fetchedBooks = await BooksAPI.search(query, SEARCH_LIMIT);\n      if (!fetchedBooks || fetchedBooks.error) {\n        books = [];\n      } else {\n        books = fetchedBooks.map((book) => {\n          // The book literal objects returned by the api search\n          // don't contain the shelf property, so we need to define it by ourselves.\n          // The ones returned by the mock api search alredy contain it instead.\n          const shelf = book.shelf || getBookShelf(book.id);\n          return { ...book, shelf };\n        });\n      }\n      return resolve(books);\n    } catch (error) {\n      return reject(error);\n    }\n  }\n\n\n  /**\n   * @method\n   * @name fetchBooks\n   * @description\n   * Fetches the books according to the query string typed by the user,\n   * triggering the search itself and then applying to the books array\n   * an internal status READY if the search completes correctly\n   * or an internal statue ERROR if an something went wrong.\n   * @param {string} query - query string typed by the user\n   * @return {Promise.<TBook[]>}\n   * @private\n   */\n  fetchBooks(query) {\n    const { BOOKS_STATUS } = this.constructor;\n    return new Promise((resolve, reject) => {\n      this.search(query, resolve, reject);\n    }).then((found) => {\n      const books = [...found];\n      books.status = BOOKS_STATUS.READY;\n      return books;\n    }).catch((error) => {\n      if (/testing/.test(error.message) === false) {\n        console.error('ERROR: ', error); // eslint-disable-line no-console\n      }\n      const books = [];\n      books.status = BOOKS_STATUS.ERROR;\n      return books;\n    });\n  }\n\n\n  /**\n   * @method\n   * @name render\n   * @description\n   * Displays an input textfield where the user can type keywords to search for books\n   * @returns {ReactElement}\n   * @private\n   */\n  render() {\n    const { query } = this.state;\n    return (\n      <div className=\"search-books-input-wrapper\">\n        <input\n          type=\"text\"\n          placeholder=\"Search by title or author\"\n          value={query}\n          onChange={this.onTyping}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\n\n/**\n * @module\n * @name PanelError\n * @description\n * Shows a red panel with a standard error text.\n */\nconst PanelError = () => (\n  <div className=\"panel-error\">\n    Something went wrong. Please try again later.\n  </div>\n);\n\nexport default PanelError;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport SearchBar from './SearchBar';\nimport PanelError from '../PanelError';\nimport BooksGrid from '../shared/BooksGrid';\n\n/**\n * @module\n * @name SearchPage\n * @extends React.Component\n * @description\n * Contains the component [SearchBar]{@link module:SearchBar} to perform a search\n * for new books and a Link to navigate back to the [MyReads]{@link module:MyReads} component.\n * If an error has been triggered during the search, it will show the component\n * [PanelError]{@link module:PanelError}, otherwise it will order the books retrieved\n * by the search using the [BooksGrid]{@link module:BooksGrid} component.\n */\nclass SearchPage extends React.Component {\n  /**\n   * @member\n   * @name propTypes\n   * @description Intended types of the props passed to the component\n   * @property {TBook[]} getBookShelf - see {@link module:App~getBookShelf}\n   * @property {function} updateBookShelf - see {@link module:App~updateBookShelf}\n   * @static\n   */\n  static propTypes = {\n    getBookShelf: PropTypes.func.isRequired,\n    updateBookShelf: PropTypes.func.isRequired,\n  };\n\n\n  constructor(props) {\n    super(props);\n    this.showResult = this.showResult.bind(this);\n  }\n\n\n  /**\n   * @member\n   * @name state\n   * @property {TBook[]} books - List of the books retrieved by the search\n   * @private\n   */\n  state = {\n    books: [],\n  };\n\n\n  /**\n   * @method\n   * @name showResult\n   * @description Shows the books retrieved by a search\n   * @param {TBook[]} books\n   */\n  async showResult(books) {\n    await this.setState({ books });\n  }\n\n\n  /**\n   * @method\n   * @name render\n   * @description\n   * Renders\n   * - A Link to navigate back to the [MyReads]{@link module:MyReads} component\n   * - The [SearchBar]{@link module:SearchBar} to perform a search for new books\n   * - The [PanelError]{@link module:PanelError} if an error has been triggered\n   * during the search, or the [BooksGrid]{@link module:BooksGrid} component otherwise.\n   * @returns {ReactElement}\n   * @private\n   */\n  render() {\n    const { BOOKS_STATUS } = SearchBar;\n    const { books } = this.state;\n    const { getBookShelf, updateBookShelf } = this.props;\n\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link to=\"/\" id=\"goto-home\" className=\"close-search\">Close</Link>\n          <SearchBar\n            getBookShelf={getBookShelf}\n            showResult={this.showResult}\n          />\n        </div>\n\n        {books.status === BOOKS_STATUS.ERROR\n          ? (<PanelError />)\n          : (\n            <div className=\"search-books-results\">\n              <BooksGrid\n                books={books}\n                updateBookShelf={updateBookShelf}\n              />\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default SearchPage;\n","\nimport React from 'react';\n\n/**\n * @module\n * @name NotFoundPage\n * @description\n * Displays a simple 404 Not Found page consisting in a green circle with text.\n * The user gets this when typing an unexpected location path in the browser url bar.\n */\nconst NotFoundPage = () => (\n  <div className=\"notfound-page-wrap\">\n    <h1>404</h1>\n    <h2>Not Found</h2>\n  </div>\n);\n\nexport default NotFoundPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport PropsRoute from './PropsRoute';\nimport MyReads from './MyReads/MyReads';\nimport SearchPage from './Search/SearchPage';\nimport NotFoundPage from './NotFoundPage';\nimport { TBook } from './shared/types';\n\n/**\n * @module\n * @name Navigation\n * @description\n * Switches the navigation of the app to:\n * - [MyReads]{@link module:MyReads} when the browser location path is exactly '/'\n * - [SearchPage]{@link module:SearchPage} when the browser location path contains '/search'\n * - [NotFoundPage]{@link module:NotFoundPage} when the browser location contains an unexpected path\n */\nconst Navigation = (props) => {\n  const { booksInShelves, getBookShelf, updateBookShelf } = props;\n\n  return (\n    <Switch>\n      <PropsRoute\n        exact\n        path=\"/\"\n        component={MyReads}\n        booksInShelves={booksInShelves}\n        updateBookShelf={updateBookShelf}\n      />\n\n      <PropsRoute\n        path=\"/search\"\n        component={SearchPage}\n        getBookShelf={getBookShelf}\n        updateBookShelf={updateBookShelf}\n      />\n\n      <Route component={NotFoundPage} />\n    </Switch>\n  );\n};\n\n/**\n * @memberof module:Navigation\n * @description Intended types of the props passed to the component\n * @property {Array.<TBook>} booksInShelves - see [booksInShelves]{@link module:App~state}\n * @property {function} getBookShelf - see [getBookShelf]{@link module:App~getBookShelf}\n * @property {function} updateBookShelf - see [updateBookShelf]{@link module:App~updateBookShelf}\n */\nNavigation.propTypes = {\n  booksInShelves: PropTypes.arrayOf(\n    PropTypes.shape(TBook).isRequired,\n  ).isRequired,\n  getBookShelf: PropTypes.func.isRequired,\n  updateBookShelf: PropTypes.func.isRequired,\n};\n\nexport default Navigation;\n","import React from 'react';\n\n/**\n * @module\n * @name BookLoader\n * @description\n * Shows a flipping book as loader animation.\n */\nconst BookLoader = () => (\n  <div className=\"book-loader\">\n    <div className=\"book-page\" />\n    <div className=\"book-page\" />\n    <div className=\"book-page\" />\n  </div>\n);\n\nexport default BookLoader;\n","import React from 'react';\nimport Navigation from './Navigation';\nimport BookLoader from './BookLoader';\nimport PanelError from './PanelError';\nimport * as BooksAPI from './BooksAPI';\nimport { TShelfKey } from './shared/types';\nimport './App.css';\nimport { ERROR } from './shared/constants';\n\n/**\n * @module\n * @name App\n * @extends React.Component\n * @description\n * When first loaded it automatically fetches all the books in the shelves\n * and it stores them internally as a state.<br>\n * This becomes the source of truth across the different sections of the app.\n */\nclass App extends React.Component {\n  /**\n   * @member\n   * @name STATUS\n   * @description Collection of possible status\n   * @property {string} INITIAL - The app is loading\n   * @property {string} BUSY - The app is remotely updating the books in the shelves\n   * @property {string} READY\n   * Either all the books has been fetched initially\n   * or the books has been remotely updated\n   * @property {string} ERROR\n   * An error occurred when tryng to fetch the books or to update them\n   * @static\n   */\n  static STATUS = {\n    INITIAL: 'STATUS.INITIAL',\n    BUSY: 'STATUS.BUSY',\n    READY: 'STATUS.READY',\n    ERROR: 'STATUS.ERROR',\n  };\n\n  /**\n   * @member\n   * @name async\n   * @description\n   * Collection of promises useful when making unit tests.\n   * @property {Promise} fetchAllBooks - waiting for the books in the shelves to be fetched\n   */\n  async = {\n    fetchAllBooks: null,\n  };\n\n  constructor(props) {\n    super(props);\n    this.updateBookShelf = this.updateBookShelf.bind(this);\n    this.getBookShelf = this.getBookShelf.bind(this);\n  }\n\n  /**\n   * @member\n   * @name state\n   * @property {STATUS} status - one of the possible [STATUS]{@link module:App.STATUS}\n   * @property {TBook[]} booksInShelves - List of all the books present in all the shelves\n   * @private\n   */\n  state = {\n    status: this.constructor.STATUS.INITIAL,\n    booksInShelves: null,\n  };\n\n  componentDidMount() {\n    this.fetchAllBooks();\n  }\n\n  /**\n   * @method\n   * @name shouldComponentUpdate\n   * @param {Object} nextProps - ignored as the module does not expect props\n   * @param {state} nextState - refers to [state]{@link module:App~state}\n   * @returns {boolean} - false if status is STATUS.BUSY\n   * @private\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    const { STATUS } = this.constructor;\n    return nextState.status !== STATUS.BUSY;\n  }\n\n  /**\n   * @method\n   * @name getBookShelf\n   * @description\n   * Retrieves the current shelf associated with a book, based on a given book id.\n   * If the book is not present in the [booksInShelves]{@link module:App~state} collection\n   * the shelf will be NONE.\n   * @param {string} bookID - The book id as described in {@link module:types.TBook}\n   * @returns {TShelfKey}\n   */\n  getBookShelf(bookID) {\n    const { booksInShelves } = this.state;\n    const book = booksInShelves.find(({ id }) => id === bookID);\n    return book ? book.shelf : TShelfKey.NONE;\n  }\n\n  /**\n   * @method\n   * @name fetchAllBooks\n   * @description\n   * Asynchronously retrieves the list of all the books currently in a shelf from remote,\n   * then it stores them internally in the state as booksInShelves collection.\n   * @returns {Promise}\n   * @private\n   */\n  fetchAllBooks() {\n    this.async.fetchAllBooks = new Promise(async (resolve) => {\n      const { STATUS } = this.constructor;\n      let booksInShelves = [];\n\n      try {\n        booksInShelves = await BooksAPI.getAll();\n\n        // NOTE: uncomment to test the initial loader animation\n        // await new Promise(resolve => {\n        //     setTimeout(()=>{ resolve(); }, 10000);\n        // });\n\n        await this.setState({\n          status: STATUS.READY,\n          booksInShelves,\n        });\n      } catch (error) {\n        if (/testing/.test(error.message) === false) {\n          console.error(error); // eslint-disable-line no-console\n        }\n        await this.setState({\n          status: STATUS.ERROR,\n          booksInShelves,\n        });\n      }\n\n      resolve(booksInShelves);\n    });\n\n    return this.async.fetchAllBooks;\n  }\n\n  /**\n   * @method\n   * @name updateBookShelf\n   * @description\n   * Updates the remote list of books in the shelves,\n   * then it changes the internal booksInShelves collection in the state accordingly.\n   * @param {TBook} book - The book the user selected\n   * @param {TShelfKey} shelf - The shelf key the user selected\n   * @returns {TBook[]} booksInShelves\n   */\n  async updateBookShelf(book, shelf) {\n    const { STATUS } = this.constructor;\n    const { booksInShelves: currBooksInShelves } = this.state;\n\n    let booksInShelves = [];\n    let status = STATUS.BUSY;\n\n    await this.setState({ status });\n\n    try {\n      const bookIdsInShelves = await BooksAPI.update(book, shelf);\n\n      switch (shelf) {\n        // Removing a book\n        case TShelfKey.NONE: {\n          // Checking that the API actually worked\n          const updated = await BooksAPI.get(book.id);\n          if (updated.shelf !== shelf) {\n            throw new Error(`${ERROR.BOOKS_API_FAILED}: update(${book.id}, ${shelf})`);\n          }\n\n          booksInShelves = currBooksInShelves.filter(({ id }) => id !== book.id);\n          break;\n        }\n        default: {\n          // Checking that the API actually worked\n          if (!bookIdsInShelves[shelf].find(id => id === book.id)) {\n            throw new Error(`${ERROR.BOOKS_API_FAILED}: update(${book.id}, ${shelf})`);\n          }\n\n          const bookIndex = currBooksInShelves.findIndex(({ id }) => id === book.id);\n\n          if (bookIndex === -1) {\n            // Adding a new book\n            booksInShelves = [...currBooksInShelves, { ...book, shelf }];\n          } else {\n            // Moving an existing book to a new shelf\n            currBooksInShelves[bookIndex].shelf = shelf;\n            booksInShelves = currBooksInShelves;\n          }\n          break;\n        }\n      }\n\n      status = STATUS.READY;\n    } catch (error) {\n      if (/testing/.test(error.message) === false) {\n        console.error(error); // eslint-disable-line no-console\n      }\n      status = STATUS.ERROR;\n    }\n\n    await this.setState({ status, booksInShelves });\n\n    return booksInShelves;\n  }\n\n  /**\n   * @method\n   * @name render\n   * @description\n   * Renders\n   * - [BookLoader]{@link module:BookLoader} when the status is STATUS.INITIAL\n   * - [Navigation]{@link module:Navigation} when the status is STATUS.READY\n   * - [PanelError]{@link module:PanelError} when the status is STATUS.ERROR\n   * @throws Error for an unexpected status\n   * @returns {ReactElement}\n   * @private\n   */\n  render() {\n    const { STATUS } = this.constructor;\n    const { booksInShelves, status } = this.state;\n\n    switch (status) {\n      case STATUS.INITIAL:\n        return <BookLoader />;\n\n      case STATUS.ERROR:\n        return <PanelError />;\n\n      case STATUS.READY:\n        return (\n          <Navigation\n            booksInShelves={booksInShelves}\n            getBookShelf={this.getBookShelf}\n            updateBookShelf={this.updateBookShelf}\n          />\n        );\n\n      default:\n        throw new Error(ERROR.UNEXPECTED_STATUS, status);\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\n/* eslint-disable no-console */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\nconst registerValidSW = (swUrl) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n};\n\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n/* eslint-enable no-console */\n","import settings from '../settings';\n\nexport function getBasename(): string {\n  const basename: {\n    [key: string]: string\n  } = settings.basename || {};\n  return (basename[window.location.hostname])\n    ? `/${basename[window.location.hostname]}/`\n    : '/';\n}\n\nexport function addBasenameToUrl(url: string): string {\n  const basename: string = getBasename();\n  return (url.indexOf(basename) === -1)\n    ? basename + url.replace(/^\\/+/g, '')\n    : url;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\nimport { getBasename } from './utils/helpers';\n\nReactDOM.render(\n  <Router basename={getBasename()}>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}